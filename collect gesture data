collect gesture data

import cv2
import mediapipe as mp
import csv

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Initialize CSV file
with open("gesture_data.csv", mode="w", newline="") as file:
    writer = csv.writer(file)
    # Write header (21 landmarks * 3 coordinates + label)
    header = [f"{axis}_{i}" for i in range(21) for axis in ["x", "y", "z"]]
    header.append("label")
    writer.writerow(header)

# Open webcam
cap = cv2.VideoCapture(0)

print("Press 's' to save keypoints and label them.")
print("Press 'q' to quit.")

with mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7) as hands:
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Flip frame and convert to RGB
        frame = cv2.flip(frame, 1)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Process the frame
        results = hands.process(rgb_frame)

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # Draw hand landmarks
                mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                # Extract keypoints
                keypoints = []
                for landmark in hand_landmarks.landmark:
                    keypoints.extend([landmark.x, landmark.y, landmark.z])

                # Display label input
                cv2.putText(frame, "Press 's' to save keypoints.", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

                # Save keypoints with label
                if cv2.waitKey(1) & 0xFF == ord('s'):
                    label = input("Enter the label for this gesture: ")  # Provide gesture label
                    keypoints.append(label)
                    with open("gesture_data.csv", mode="a", newline="") as file:
                        writer = csv.writer(file)
                        writer.writerow(keypoints)
                    print(f"Saved keypoints with label: {label}")

        # Display frame
        cv2.imshow('Hand Tracking', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
